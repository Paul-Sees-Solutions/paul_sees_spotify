playlist makers:

options:
Artists to include:

Master with options
all tracks by an artist:
   checkboxes: choices = "Artist's tracks from Artist's own albums", "Artist's tracks from other artists albums", "Artists tracks from compilations"
tracks related to an artist
    "Other artists' tracks from Artist's albums", "Other Artists' tracks from albums Artist features on", "Other artists' tracks from compilations"

Single button generators:

All tracks from Artist's own albums
All tracks including other artists' albums
All tracks including other artists and compilations

album sorting
sorted(results_list, key=lambda x: (x['artists'][0]['name'], x['name']))



      {% if 'artists' in results_dict %}
        <h1> ARTISTS </h1>
        <p> {% for artist in artist_list %}
        <a href={{artist['external_urls']['spotify']}}> {{artist['name']}} </a>
<br />
        {% endfor %}
      {% endif %}








A PAGE IS:
a view in routes
a form in forms
html in templates



### backup search ###


        # search_term = form.search_term.data
        # artist = form.artist.data
        # album = form.album.data
        # track = form.track.data
        # release_date = form.release_date.data
        # only_new = form.only_new.data
        # category = form.category.data
        # if 'any' in category:
        #     category = "artist,album,track,playlist" ### ,show,episode ### implement in html....
        # else:
        #     category=','.join(category)
        #     category.replace(" ","")
        # search_dict = {
        #     'artist': artist,
        #     'album': album,
        #     'track': track,
        #     'release_date': release_date,
        #     'only_new': only_new}
        # if search_term:
        #     search_string = search_term
        # else:
        #     search_string = ''
        # for count, thing in enumerate(search_dict):
        #     if search_dict[thing]:
        #         search_string = search_string + " " + thing + ":" + search_dict[thing]
### backup search ###